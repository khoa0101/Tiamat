/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/character/char.js":
/*!*******************************!*\
  !*** ./src/character/char.js ***!
  \*******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Game = __webpack_require__(/*! ../game.js */ \"./src/game.js\");\nconst Skill = __webpack_require__(/*! ./skills/skill.js */ \"./src/character/skills/skill.js\"); \n\nfunction Character(id, side, charType, level = 1, currentHealth = 50, maxHealth = 50, AP = 4, APRec = 4, power = 10, armor = 30,\n  initiative = 10, critChance = 0, critDamage = 2, damageMod = 0, healMod = 0, cdMod = 0, lifesteal = 0, regen = 1,\n  barrier = 0, barrierDecay = 0, physicalRes = 0, fireRes = 0, waterRes = 0, lightningRes = 0, poisonRes = 0, energyRes = 0, \n  holyRes = 0, darkRes = 0, physicalMod = 0, fireMod = 0, waterMod = 0, lightningMod = 0, poisonMod = 0,\n  energyMod = 0, holyMod = 0, darkMod = 0, talents = [], conditions = [],  xp = 0,\n  maxXP = 100, xpReward = 0, normalAttackType = 'physical', skills = []) {\n    this.id = id;\n    this.level = level;\n    this.active = true;\n    this.alive = true;\n    this.side = side;\n    this.charType = charType;\n    this.currentHealth = currentHealth;\n    this.maxHealth = maxHealth;\n    this.AP = AP;\n    this.APMax = 6;\n    this.APRec = APRec;\n    this.power = power;\n    this.armor = armor;\n    this.maxArmor = armor;\n    this.initiative = initiative;\n    this.critChance = critChance;\n    this.critDamage = critDamage;\n    this.damageMod = damageMod;\n    this.healMod = healMod;\n    this.cdMod = cdMod;\n    this.lifesteal = lifesteal;\n    this.regen = regen;\n    this.barrier = barrier;\n    this.maxBarrier = regen;\n    this.barrierDecay = barrierDecay;\n    this.physicalRes = physicalRes;\n    this.fireRes = fireRes;\n    this.waterRes = waterRes;\n    this.lightningRes = lightningRes;\n    this.poisonRes = poisonRes;\n    this.energyRes = energyRes;\n    this.holyRes = holyRes;\n    this.darkRes = darkRes;\n    this.normalAttackType = normalAttackType;\n    this.physicalMod = physicalMod;\n    this.fireMod = fireMod;\n    this.waterMod = waterMod;\n    this.lightningMod = lightningMod;\n    this.poisonMod = poisonMod;\n    this.energyMod = energyMod;\n    this.holyMod = holyMod;\n    this.darkMod = darkMod;\n    this.talents = talents;\n    this.conditions = conditions;\n    this.xp = xp;\n    this.maxXP = maxXP;\n    this.xpReward = xpReward;\n    skills.unshift(\n      new Skill(this,\n      `../../dist/images/skill_image/all_in-attack.png`,  \n      'Basic Attack',\n      `Attack an enemy for ${this.damageCal(this.normalAttackType, 1, 0)} ${this.normalAttackType} damage.`,\n      2, 0, 1, 'enemy', 0, 1, true, 0, this.normalAttackType));\n    this.skills = skills;\n}\n\nCharacter.prototype.render = function(el, i){\n  const img = document.createElement(\"img\");\n  const div = document.createElement('div');\n  const imgContainer = document.createElement('div');\n  const healthContainer = document.createElement('div');\n  const healthBar = document.createElement('div');\n  const healthText = document.createElement('i');\n  const health = document.createElement('div');\n  const armor = document.createElement('div');\n  const armorText = document.createElement('i');\n  const armorDisplay = document.createElement('div');\n  const barrier = document.createElement('div');\n  const barrierText = document.createElement('i');\n  const barrierDisplay = document.createElement('div');\n  div.setAttribute('value', i);\n  healthBar.classList.add('health-bar');\n  health.classList.add('health-green');\n  healthContainer.classList.add('health-container');\n  armorDisplay.classList.add('armor-silver');\n  armor.classList.add('armor');\n  barrierDisplay.classList.add('barrier-cyan');\n  barrier.classList.add('barrier');\n  healthBar.value = this.currentHealth;\n  healthBar.max = this.maxHealth;\n  healthText.innerHTML = `${this.currentHealth}/${this.maxHealth}`;\n  armor.value = this.armor;\n  armor.max = this.armor;\n  armorText.innerHTML =  `${this.armor}`;\n  barrier.value = this.barrier;\n  barrier.max = this.barrier;\n  barrierText.innerHTML = `${this.barrier}`;\n  img.src = `./dist/images/${this.charType.toLowerCase()}-portrait.png`;\n  div.classList.add('character');\n  div.setAttribute('id', `${this.charType}-${i}`);\n  imgContainer.appendChild(img);\n  div.appendChild(imgContainer);\n  healthBar.appendChild(healthText);\n  healthBar.appendChild(health);\n  armor.appendChild(armorText);\n  armor.appendChild(armorDisplay);\n  barrier.appendChild(barrierText);\n  barrier.appendChild(barrierDisplay);\n  healthContainer.appendChild(healthBar);\n  healthContainer.appendChild(armor);\n  healthContainer.appendChild(barrier);\n  div.appendChild(healthContainer);\n  if (this.side === 'player'){\n    this.renderSkills(div);\n  }\n  el.appendChild(div);\n  if (this.armor < 1){\n    armor.style.opacity = 0;\n  } else {\n    healthText.style.opacity = 0;\n  }\n  if (this.barrier < 1){\n    barrier.style.opacity = 0;\n  } else {\n    healthText.style.opacity = 0;\n    armorText.style.opacity = 0;\n  }\n}\n\nCharacter.prototype.renderSkills = function(el){\n  const ul = document.createElement('ul');\n\n  ul.classList.add('skills-container');\n  ul.setAttribute('id', `${this.charType}-${this.id}-skills`);\n  this.skills.forEach((skill, i) => {\n    const li = document.createElement('li');\n    const img = document.createElement('img');\n    const text = document.createElement('div');\n    \n    img.src = skill.image;\n    li.appendChild(text);\n    li.appendChild(img);\n    li.classList.add('skill');\n    li.setAttribute('value', i);\n    ul.appendChild(li);\n  })\n  el.appendChild(ul);\n}\n\nCharacter.prototype.renderPortrait = function(){\n  const img = document.createElement('img');\n  img.src=`./dist/images/${this.charType.toLowerCase()}-portrait.png`;\n  if (this.side === \"enemy\"){\n    img.classList.add(\"enemy\");\n  } else {\n    img.classList.add(\"player\");\n  } \n  return img; \n}\n\nCharacter.prototype.renderFrame = function(i){\n  let el = document.getElementById(`${this.charType}-${i}`);\n  let health = el.querySelector(`.health-bar i`);\n  let healthBar = el.querySelector('.health-green');\n  let armor = el.querySelector(`.armor i`);\n  let armorBar = el.querySelector('.armor-silver');\n  let barrier = el.querySelector(`.barrier i`);\n  let barrierBar = el.querySelector('.barrier-cyan');\n\n  healthBar.style.width = `${this.currentHealth/ this.maxHealth * 100}%`;\n  armorBar.style.width = `${this.armor/this.maxArmor * 100}%`;\n  barrierBar.style.width = `${this.barrier/this.maxBarrier * 100}%`;\n  health.innerHTML = `${this.currentHealth}/${this.maxHealth}`;\n  armor.innerHTML =  `${this.armor}`;\n  barrier.innerHTML = `${this.barrier}`;\n  if (this.armor < 1){\n    armor.parentNode.style.opacity = 0;\n    health.style.opacity = 1;\n  } else {\n    armor.parentNode.style.opacity = 1;\n  }\n\n  if (this.barrier < 1){\n    barrier.parentNode.style.opacity = 0;\n    armor.style.opacity = 1;\n  } else {\n    armor.style.opacity = 0;\n    barrier.parentNode.style.opacity = 1;\n    health.style.opacity = 0;\n  }\n\n  if (this.side === 'player'){\n    let skills = [...el.querySelectorAll(`#${this.charType}-${this.id}-skills div`)];\n    skills.forEach((skill) => {\n      let index = skill.parentNode.getAttributeNode('value').value;\n      let CD = this.skills[index].remainingCD;\n      skill.innerHTML = `${CD < 1 ? \"\" : CD}`;\n    })\n  }\n};\n\nCharacter.prototype.printInfo = function(){\n  const div = document.getElementById('info-display');\n  const skill = document.getElementsByClassName('skill-info-container')[0];\n  const img = document.getElementsByClassName('info-image')[0];\n  const ul = document.getElementsByClassName('info-container')[0];\n  const level = document.getElementById('level');\n  const charType = document.getElementById('charType');\n  const maxHealth = document.getElementById('maxHealth');\n  const armor = document.getElementById('armor');\n  const barrier = document.getElementById(`barrier`);\n  const initiative = document.getElementById(`initiative`);\n  const power = document.getElementById(`power`);\n  const critChance = document.getElementById(`critChance`);\n  const critDamage = document.getElementById(`critDamage`);\n  const damageMod = document.getElementById(`damageMod`);\n  const healMod = document.getElementById(`healMod`);\n  const cdMod = document.getElementById(`cdMod`);\n  const lifesteal = document.getElementById(`lifesteal`);\n  const regen = document.getElementById(`regen`);\n  const physicalRes = document.getElementById(`physicalRes`);\n  const fireRes = document.getElementById(`fireRes`);\n  const waterRes = document.getElementById(`waterRes`);\n  const lightningRes = document.getElementById(`lightningRes`);\n  const poisonRes = document.getElementById(`poisonRes`);\n  const energyRes = document.getElementById(`energyRes`);\n  const holyRes = document.getElementById(`holyRes`);\n  const darkRes = document.getElementById(`darkRes`);\n  const physicalMod = document.getElementById(`physicalMod`);\n  const fireMod = document.getElementById(`fireMod`);\n  const waterMod = document.getElementById(`waterMod`);\n  const lightningMod = document.getElementById(`lightningMod`);\n  const poisonMod = document.getElementById(`poisonMod`);\n  const energyMod = document.getElementById(`energyMod`);\n  const holyMod = document.getElementById(`holyMod`);\n  const darkMod = document.getElementById(`darkMod`);\n  const talents = document.getElementById(`talents`);\n  const conditions = document.getElementById(`conditions`);\n\n  img.src=`./dist/images/${this.charType.toLowerCase()}.png`;\n  img.classList.remove('hidden');\n  img.classList.remove('skill-image-info')\n  if (this.side === \"enemy\"){\n    img.classList.remove('player');\n    img.classList.add(\"enemy\");\n  } else {\n    img.classList.remove('enemy');\n    img.classList.add(\"player\");\n  }\n  \n  ul.classList.remove('hidden');\n  skill.classList.add('hidden');\n\n  level.innerHTML = `Level: ${this.level}`;\n  charType.innerHTML = `${this.charType}`;\n  maxHealth.innerHTML = `Health: ${this.currentHealth}/${this.maxHealth}`;\n  armor.innerHTML = `Armor: ${this.armor}`;\n  barrier.innerHTML = `Barrier: ${this.barrier}`;\n  power.innerHTML = `Power: ${this.power}`;\n  initiative.innerHTML = `Initiative: ${this.initiative}`;\n  critChance.innerHTML = `Critical Chance: ${this.critChance * 100}%`;\n  critDamage.innerHTML = `Critical Damage: ${this.critDamage * 100}%`;\n  damageMod.innerHTML = `Damage Modifier: ${this.damageMod * 100}%`;\n  healMod.innerHTML = `Healing Modifier: ${this.healMod * 100}%`;\n  cdMod.innerHTML = `Cooldown Reduction: ${this.cdMod * 100}%`;\n  lifesteal.innerHTML = `Lifesteal Reduction: ${this.lifesteal * 100}%`;\n  regen.innerHTML = `Health Regeneration: ${this.regen}/turn`;\n  physicalRes.innerHTML = `Physical Damage Resistance: ${this.physicalRes * 100}%`;\n  fireRes.innerHTML = `Fire Damage Resistance: ${this.fireRes * 100}%`;\n  waterRes.innerHTML = `Water Damage Resistance: ${this.waterRes * 100}%`;\n  lightningRes.innerHTML = `Lightning Damage Resistance: ${this.lightningRes * 100}%`;\n  poisonRes.innerHTML = `Poison Damage Resistance: ${this.poisonRes * 100}%`;\n  energyRes.innerHTML = `Energy Damage Resistance: ${this.energyRes * 100}%`;\n  holyRes.innerHTML = `Holy Damage Resistance: ${this.holyRes * 100}%`;\n  darkRes.innerHTML = `Darkness Damage Resistance: ${this.darkRes * 100}%`;\n  physicalMod.innerHTML = `Physical Damage Modifier: ${this.physicalMod * 100}%`;\n  fireMod.innerHTML = `Fire Damage Modifier: ${this.fireMod * 100}%`;\n  waterMod.innerHTML = `Water Damage Modifier: ${this.waterMod * 100}%`;\n  lightningMod.innerHTML = `Lightning Damage Modifier: ${this.lightningMod * 100}%`;\n  poisonMod.innerHTML = `Poison Damage Modifier: ${this.poisonMod * 100}%`;\n  energyMod.innerHTML = `Energy Damage Modifier: ${this.energyMod * 100}%`;\n  holyMod.innerHTML = `Holy Damage Modifier: ${this.holyMod * 100}%`;\n  darkMod.innerHTML = `Darkness Damage Modifier: ${this.darkMod * 100}%`;\n  talents.innerHTML = `Talents: ` + (this.talents.length > 0 ? \"\" : \"None\");\n  conditions.innerHTML = `Current Conditions: ` + (this.conditions.length > 0 ? \"\" : \"None\");\n  div.scrollTop = 0;\n};\n\nCharacter.prototype.damageCal = function(dmgType, powerRatio, baseDmg){\n  let totalDamage = Math.floor((baseDmg + (this.power * powerRatio)) \n  * (1.0 + this[`${dmgType}Mod`]) * (1.0 + this.damageMod));\n  return totalDamage;\n}\n\nCharacter.prototype.takeDamage = function(dmgType ,dmg){\n  let damageRecieve = Math.floor(dmg * (1.0 - this[`${dmgType}Res`]));\n  if (damageRecieve < 0){\n    heal(this, -damageRecieve);\n  } else {\n    let remainder = damageRecieve;\n    if (this.barrier > 0){\n      remainder -= this.barrier;\n      this.barrier -= damageRecieve;\n      if (this.barrier < 0) {\n        this.barrier = 0;\n      }\n    }\n    if (this.armor > 0 && remainder > 0){\n      let temp = this.armor;\n      this.armor -= remainder;\n      remainder -= temp;\n      if (this.armor < 0) {\n        this.armor = 0;\n      }\n    }\n    if (remainder > 0){\n      this.currentHealth -= remainder;\n      if (this.currentHealth < 0) this.currentHealth = 0;\n    }\n  }\n  this.checkDeath();\n  return damageRecieve;\n}\nCharacter.prototype.endTurn = function(){\n  if(this.alive){\n    this.AP += this.APRec;\n    if (this.AP > this.APMax){\n      this.AP = this.APMax;\n    }\n    this.skills.forEach(skill => {\n      skill.remainingCD -= 1;\n      if (skill.remainingCD < 0){\n        skill.remainingCD = 0;\n      }\n    });\n\n    for (let i = 0; i < this.conditions.length; i++){\n      if (this.conditions[i].remainingTurn < 1){\n        this.conditions[i].remove(this);\n        this.conditions.splice(i, 1);\n        i--;\n      };\n    }\n    this.heal(this.healCal(0, this.regen));\n    this.barrierDie();\n  }\n}\n\nCharacter.prototype.barrierDie = function(){\n  if (this.barrier > 0){\n    this.barrier -= this.barrierDecay;\n    if (this.barrier < 0){\n      this.barrier = 0;\n    } \n  }\n}\n\nCharacter.prototype.healCal = function(powerRatio, baseHeal){\n  let totalHeal = Math.floor((baseHeal + (this.power * powerRatio)) \n  * (1.0 + this.healMod));\n  return totalHeal;\n}\n\nCharacter.prototype.heal = function(healAmt){\n  let value = this.currentHealth + healAmt;\n  if (value > this.maxHealth){\n    this.currentHealth = this.maxHealth;\n    this.barrier += value - this.maxHealth;\n    if (this.barrier > this.maxBarrier) this.maxBarrier = this.barrier;\n  } else {\n    this.currentHealth = value;\n  }\n}\n\nCharacter.prototype.checkDeath = function(){\n  if (this.currentHealth <= 0){\n    this.alive = false;\n  }\n}\n\nCharacter.prototype.addSkill = function(img, name, description, AP, cd, \n  targetNum, targetType, basePower, scaling, crit = false, bonusCrit = 0, affinity = null, status = []){\n    this.skills.push(new Skill(this, img, name, description, AP, cd, targetNum, targetType,\n      basePower, scaling, crit, bonusCrit, affinity, status));\n}\n\nmodule.exports = Character;\n\n//# sourceURL=webpack:///./src/character/char.js?");

/***/ }),

/***/ "./src/character/classes/cleric.js":
/*!*****************************************!*\
  !*** ./src/character/classes/cleric.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Character = __webpack_require__(/*! ../char.js */ \"./src/character/char.js\");\n// const ArmorHeal = require(\"../skills/armorboost.js\");\nclass Cleric extends Character{\n  constructor(id, side = \"player\", charType = \"Cleric\", level = 1, currentHealth = 50, maxHealth = 50, AP = 4, APRec = 4, power = 10, armor = 20,\n    initiative = 12, critChance = 0, critDamage = 2, damageMod = 0, healMod = 0, cdMod = 0, lifesteal = 0, regen = 4,\n    barrier = 0, barrierDecay = 10, physicalRes = 0, fireRes = 0, waterRes = 0, lightningRes = 0, poisonRes = 0, energyRes = 0, \n    holyRes = 0, darkRes = 0, physicalMod = 0, fireMod = 0, waterMod = 0, lightningMod = 0, poisonMod = 0,\n    energyMod = 0, holyMod = 0, darkMod = 0, talents = [], conditions = [], xp = 0,\n    maxXP = 100, xpReward = 0){\n    super(id, side, charType, level,  currentHealth,  maxHealth, AP,  APRec,  power,  armor, \n      initiative, critChance,  critDamage,  damageMod,  healMod,  cdMod,  lifesteal,  regen, \n      barrier,  barrierDecay,  physicalRes,  fireRes,  waterRes,  lightningRes,  poisonRes,  energyRes,  \n      holyRes, darkRes,  physicalMod,  fireMod,  waterMod,  lightningMod,  poisonMod, \n      energyMod, holyMod,  darkMod,  talents, conditions, xp, \n      maxXP, xpReward);\n    this.healAlly();\n    this.massHeal();\n    this.smite();\n    this.mendArmor();\n  };\n\n  healAlly(){\n    let description = `Heal an ally for ${this.healCal(1, 5)} health.`;\n    let img = `../../../dist/images/skill_image/hydrosophist_restoration-icon.png`\n    this.addSkill(img, `Heal`, description, 2, 2, 1, 'ally', 5, 1);\n  }\n\n  massHeal(){\n    let description = `Heal all allies for ${this.healCal(1, 20)} health.`;\n    let img = `../../../dist/images/skill_image/hydrosophist_healing_ritual-icon.png`;\n    this.addSkill(img, `Healing Ritual`, description, 3, 4, 4, 'ally', 20, 1);\n  }\n\n  smite(){\n    let affinity = `lightning`;\n    let img = `../../../dist/images/skill_image/aerotheurge_lightning_bolt-icon.png`;\n    let description = `Summon heaven's lightning to smite your enemies for ${this.damageCal(affinity, 1, 5)} ${affinity} damage.${\" \"} \n    This ability can crit and has a 30% bonus critical chance.`;\n  }\n\n  mendArmor(){\n    // this.skills.push(new ArmorBoost(this, img, `Mend Armor`))\n  }\n\n}\n\nmodule.exports = Cleric;\n\n//# sourceURL=webpack:///./src/character/classes/cleric.js?");

/***/ }),

/***/ "./src/character/classes/ranger.js":
/*!*****************************************!*\
  !*** ./src/character/classes/ranger.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Character = __webpack_require__(/*! ../char.js */ \"./src/character/char.js\");\n\nclass Ranger extends Character{\n  constructor(id, side = \"player\", charType = \"Ranger\", level = 1, currentHealth = 35, maxHealth = 35, AP = 4, APRec = 4, power = 15, armor = 20,\n    initiative = 16, critChance = 0, critDamage = 2, damageMod = 0, healMod = 0, cdMod = 0, lifesteal = 0, regen = 1,\n    barrier = 0, barrierDecay = 10, physicalRes = 0, fireRes = 0, waterRes = 0, lightningRes = 0, poisonRes = 0, energyRes = 0, \n    holyRes = 0, darkRes = 0, physicalMod = 0, fireMod = 0, waterMod = 0, lightningMod = 0, poisonMod = 0,\n    energyMod = 0, holyMod = 0, darkMod = 0, talents = [], conditions = [], xp = 0,\n    maxXP = 100, xpReward = 0){\n    super(id, side, charType, level,  currentHealth,  maxHealth, AP,  APRec,  power,  armor, \n      initiative, critChance,  critDamage,  damageMod,  healMod,  cdMod,  lifesteal,  regen, \n      barrier,  barrierDecay,  physicalRes,  fireRes,  waterRes,  lightningRes,  poisonRes,  energyRes,  \n      holyRes, darkRes,  physicalMod,  fireMod,  waterMod,  lightningMod,  poisonMod, \n      energyMod, holyMod,  darkMod,  talents, conditions, xp, \n      maxXP, xpReward);\n  };\n}\n\nmodule.exports = Ranger;\n\n//# sourceURL=webpack:///./src/character/classes/ranger.js?");

/***/ }),

/***/ "./src/character/classes/rogue.js":
/*!****************************************!*\
  !*** ./src/character/classes/rogue.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Character = __webpack_require__(/*! ../char.js */ \"./src/character/char.js\");\nclass Rogue extends Character{\n  constructor(id, side = \"player\", charType = \"Rogue\", level = 1, currentHealth = 40, maxHealth = 40, AP = 4, APRec = 4, power = 18, armor = 20,\n    initiative = 18, critChance = 0, critDamage = 2, damageMod = 0, healMod = 0, cdMod = 0, lifesteal = 0, regen = 2,\n    barrier = 0, barrierDecay = 10, physicalRes = 0, fireRes = 0, waterRes = 0, lightningRes = 0, poisonRes = 0, energyRes = 0, \n    holyRes = 0, darkRes = 0, physicalMod = 0, fireMod = 0, waterMod = 0, lightningMod = 0, poisonMod = 0,\n    energyMod = 0, holyMod = 0, darkMod = 0, talents = [], conditions = [], xp = 0,\n    maxXP = 100, xpReward = 0){\n    super(id, side, charType, level,  currentHealth,  maxHealth, AP,  APRec,  power,  armor, \n      initiative, critChance,  critDamage,  damageMod,  healMod,  cdMod,  lifesteal,  regen, \n      barrier,  barrierDecay,  physicalRes,  fireRes,  waterRes,  lightningRes,  poisonRes,  energyRes,  \n      holyRes, darkRes,  physicalMod,  fireMod,  waterMod,  lightningMod,  poisonMod, \n      energyMod, holyMod,  darkMod,  talents, conditions, xp, \n      maxXP, xpReward);\n  };\n}\n\nmodule.exports = Rogue;\n\n//# sourceURL=webpack:///./src/character/classes/rogue.js?");

/***/ }),

/***/ "./src/character/classes/warrior.js":
/*!******************************************!*\
  !*** ./src/character/classes/warrior.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Character = __webpack_require__(/*! ../char.js */ \"./src/character/char.js\");\nconst {ArmorBoost} = __webpack_require__(/*! ../skills/status.js */ \"./src/character/skills/status.js\");\nclass Warrior extends Character{\n  constructor(id, side = \"player\", charType = \"Warrior\", level = 1, currentHealth = 100, maxHealth = 100, AP = 4, APRec = 4, power = 10, armor = 20,\n    initiative = 11, critChance = 0, critDamage = 2, damageMod = 0, healMod = 0, cdMod = 0, lifesteal = 0, regen = 5,\n    barrier = 0, barrierDecay = 10, physicalRes = 0, fireRes = 0, waterRes = 0, lightningRes = 0, poisonRes = 0, energyRes = 0, \n    holyRes = 0, darkRes = 0, physicalMod = 0, fireMod = 0, waterMod = 0, lightningMod = 0, poisonMod = 0,\n    energyMod = 0, holyMod = 0, darkMod = 0, talents = [], conditions = [], xp = 0,\n    maxXP = 100, xpReward = 0){\n    super(id, side, charType, level,  currentHealth,  maxHealth, AP,  APRec,  power,  armor, \n      initiative, critChance,  critDamage,  damageMod,  healMod,  cdMod,  lifesteal,  regen, \n      barrier,  barrierDecay,  physicalRes,  fireRes,  waterRes,  lightningRes,  poisonRes,  energyRes,  \n      holyRes, darkRes,  physicalMod,  fireMod,  waterMod,  lightningMod,  poisonMod, \n      energyMod, holyMod,  darkMod,  talents, conditions, xp, \n      maxXP, xpReward);\n    this.armorUp();\n  };\n\n  armorUp(){\n    let description = `Shield yourself to gain an additional ${this.healCal(0, 30)} armor.`;\n    let image = `../../../dist/images/skill_image/warfare_deflective_barrier-icon.png`;\n      let status = [new ArmorBoost(this, 3, this.healCal(0,30), true, false, \"Shield Up!\", description, false)];\n    this.addSkill(image, `Shield Up!`, description, 2, 2, 1, \"self\", 0, 0, false, false, null, status);\n    console.log(this.skills[1]);\n  }\n}\n\nmodule.exports = Warrior;\n\n//# sourceURL=webpack:///./src/character/classes/warrior.js?");

/***/ }),

/***/ "./src/character/classes/wizard.js":
/*!*****************************************!*\
  !*** ./src/character/classes/wizard.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Character = __webpack_require__(/*! ../char.js */ \"./src/character/char.js\");\nclass Wizard extends Character{\n  constructor(id, side = \"player\", charType = \"Wizard\", level = 1, currentHealth = 30, maxHealth = 30, AP = 4, APRec = 4, power = 15, armor = 10,\n    initiative = 14, critChance = 0, critDamage = 2, damageMod = 0, healMod = 0, cdMod = 0, lifesteal = 0, regen = 2,\n    barrier = 0, barrierDecay = 10, physicalRes = 0, fireRes = 0, waterRes = 0, lightningRes = 0, poisonRes = 0, energyRes = 0, \n    holyRes = 0, darkRes = 0, physicalMod = 0, fireMod = 0, waterMod = 0, lightningMod = 0, poisonMod = 0,\n    energyMod = 0, holyMod = 0, darkMod = 0, talents = [], conditions = [], xp = 0,\n    maxXP = 100, xpReward = 0){\n    super(id, side, charType, level,  currentHealth,  maxHealth, AP,  APRec,  power,  armor, \n      initiative, critChance,  critDamage,  damageMod,  healMod,  cdMod,  lifesteal,  regen, \n      barrier,  barrierDecay,  physicalRes,  fireRes,  waterRes,  lightningRes,  poisonRes,  energyRes,  \n      holyRes, darkRes,  physicalMod,  fireMod,  waterMod,  lightningMod,  poisonMod, \n      energyMod, holyMod,  darkMod,  talents, conditions, xp, \n      maxXP, xpReward, 'fire');\n    this.fireBall(); \n  };\n\n  fireBall(){\n    let affinity = 'fire';\n    let img = `../../../dist/images/skill_image/pyrokinetic_fireball-icon.png`;\n    let description = `Summon a fireball dealing ${this.damageCal(affinity, 1, 10)} ${affinity} damage to all enemies.`;\n    this.addSkill(img,'Fireball', description, 2, 2, 4, 'enemy', 10, 1, false, 0, affinity);\n  }\n}\n\nmodule.exports = Wizard;\n\n//# sourceURL=webpack:///./src/character/classes/wizard.js?");

/***/ }),

/***/ "./src/character/enemies/slime.js":
/*!****************************************!*\
  !*** ./src/character/enemies/slime.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Character = __webpack_require__(/*! ../char.js */ \"./src/character/char.js\");\n\nclass Slime extends Character{\n  constructor(id, side = \"enemy\", charType = \"Slime\", level = 1, currentHealth = 100, maxHealth = 100, AP = 4, APRec = 4, power = 5, armor = 0,\n    initiative = 10, critChance = 0, critDamage = 2, damageMod = 0, healMod = 0, cdMod = 0, lifesteal = 0, regen = 15,\n    barrier = 0, barrierDecay = 5, physicalRes = 0, fireRes = 0, waterRes = 0, lightningRes = 0, poisonRes = 0, energyRes = 0, \n    holyRes = 0, darkRes = 0, physicalMod = 0, fireMod = 0, waterMod = 0, lightningMod = 0, poisonMod = 0,\n    energyMod = 0, holyMod = 0, darkMod = 0, talents = [], conditions = [], xp = 0,\n    maxXP = 100, xpReward = 0){\n    super(id, side, charType, level,  currentHealth,  maxHealth, AP,  APRec,  power,  armor, \n      initiative, critChance,  critDamage,  damageMod,  healMod,  cdMod,  lifesteal,  regen, \n      barrier,  barrierDecay,  physicalRes,  fireRes,  waterRes,  lightningRes,  poisonRes,  energyRes,  \n      holyRes, darkRes,  physicalMod,  fireMod,  waterMod,  lightningMod,  poisonMod, \n      energyMod, holyMod,  darkMod,  talents, conditions, xp, \n      maxXP, xpReward);\n  };\n}\n\nmodule.exports = Slime;\n\n//# sourceURL=webpack:///./src/character/enemies/slime.js?");

/***/ }),

/***/ "./src/character/skills/skill.js":
/*!***************************************!*\
  !*** ./src/character/skills/skill.js ***!
  \***************************************/
/***/ ((module) => {

eval("class Skill {\n  constructor(character, image, name, description, AP, cd, targetNum, targetType, basePower, scaling, \n    crit = false, bonusCrit = 0, affinity = 'none', status = []){\n    this.character = character;\n    this.image = image;\n    this.name = name;\n    this.description = description;\n    this.AP = AP;\n    this.cd = cd;\n    this.remainingCD = 0;\n    this.basePower = basePower;\n    this.scaling = scaling;\n    this.crit = crit;\n    this.bonusCrit = bonusCrit;\n    this.affinity = affinity;\n    this.targetNum = targetNum;\n    this.targetType = targetType;\n    this.status = status;\n    this.renderTarget = this.renderTarget.bind(this);\n    this.performSkill = this.performSkill.bind(this);\n  }\n\n  printInfo(){\n    const div = document.getElementsByClassName('skill-info-container')[0];\n    const img = document.getElementsByClassName('info-image')[0];\n    const ul = document.getElementsByClassName('info-container')[0];\n    const title = document.getElementById('skill-name');\n    const cost = document.getElementById('skill-cost');\n    const cooldown = document.getElementById('skill-cooldown');\n    const description = document.getElementById('skill-description');\n    \n    div.classList.remove('hidden');\n    img.classList.remove('hidden', 'player', 'enemy');\n    img.classList.add('skill-image-info');\n    ul.classList.add('hidden');\n\n    img.src = this.image;\n    title.innerHTML = this.name;\n    cost.innerHTML = `AP: ${this.AP}`;\n    cooldown.innerHTML = `Cooldown: ${this.cd < 1 ? \"none\" : this.cd < 2 ? `${this.cd} turn` : `${this.cd} turns`}`\n    description.innerHTML = this.description;\n  }\n\n  performSkill(target){\n    if (this.targetType === 'enemy'){\n      let damage = this.character.damageCal(this.affinity, this.scaling, this.basePower);\n      if (this.crit){\n        if (Math.random() < this.character.crit){\n          damage *= this.character.critDamage;\n        }\n      }\n      const resistedDamage = target.takeDamage(this.affinity, damage);\n    } else {\n      const heal = this.character.healCal(this.scaling, this.basePower);\n      target.heal(heal);\n    }\n    \n    this.status.forEach(condi => {\n      let found = false;\n      let index = 0;\n      target.conditions.forEach((ele, i) => {\n        if (ele.name === condi.name){\n          found = true;\n          index = i;\n        }\n      })\n      \n      if (found){\n        condi.apply(target, target.conditions[index]);\n      } else {\n        target.conditions.push(condi);\n        condi.apply(target, condi);\n      }\n    })\n\n    if (GAME.currentTurn.side === 'player'){\n      const currentTurnSkills = document.getElementById(`${GAME.currentTurn.charType}-${GAME.currentTurn.id}-skills`);\n      GAME_VIEW.currentTurn(currentTurnSkills);\n    }\n\n    GAME_VIEW.renderFrame();\n  }\n\n  renderTarget(e){\n      if (this.targetType === 'enemy'){\n        this.fetchTarget('enemy-team', GAME.enemies);\n      }\n      else {\n        this.fetchTarget('player-team', GAME.players);\n      }\n\n      e.target.parentNode.parentNode.childNodes.forEach((child) => {\n        const index = child.getAttributeNode('value').value;\n        const skill = GAME.currentTurn.skills[index];\n        child.removeEventListener('click', skill.renderTarget);\n      })\n  }\n\n  fetchTarget(id, side){\n    const team = document.getElementById(id);\n    const skill = this;\n\n    const clickSingleTarget = function(e){\n      skill.character.AP -= skill.AP;\n      skill.remainingCD += skill.cd;\n      const index = e.target.parentNode.getAttributeNode('value').value;\n      if (skill.targetType === 'enemy'){\n        skill.performSkill(GAME.enemies[index]);\n      } else {\n        skill.performSkill(GAME.players[index]);\n      }\n\n      team.childNodes.forEach((el) => {\n        el.childNodes[0].classList.remove('single-target');\n        el.childNodes[0].removeEventListener('click', clickSingleTarget);\n      });\n    }\n\n    const clickAllTarget = function(e){\n      skill.character.AP -= skill.AP;\n      skill.remainingCD += skill.cd;\n      if (skill.targetType === 'enemy'){\n        GAME.enemies.forEach(target =>{\n          skill.performSkill(target);\n        })\n      } else {\n        GAME.players.forEach(target =>{\n          skill.performSkill(target);\n        })\n      }\n      team.childNodes.forEach((child) => {\n        child.childNodes[0].classList.remove('all-targets');\n        child.childNodes[0].removeEventListener('click', clickAllTarget);\n      });\n    }\n\n    document.addEventListener('contextmenu', (e) => {\n      e.preventDefault();\n      const currentTurnSkills = document.getElementById(`${GAME.currentTurn.charType}-${GAME.currentTurn.id}-skills`);\n      team.childNodes.forEach((child) => {\n        child.childNodes[0].classList.remove('all-targets');\n        child.childNodes[0].removeEventListener('click', clickAllTarget);\n        child.childNodes[0].classList.remove('single-target');\n        child.childNodes[0].removeEventListener('click', clickSingleTarget);\n        GAME_VIEW.currentTurn(currentTurnSkills);\n      });\n    })\n\n    if (this.AP <= this.character.AP){\n      if (this.targetType === 'self'){\n        const target = this.character.id;\n        team.childNodes.forEach((child) => {\n          const index = child.getAttributeNode('value').value;\n          if (side[index].alive && +index === target){\n            child.childNodes[0].classList.add('single-target');\n            child.childNodes[0].addEventListener('click', clickSingleTarget);\n          }\n        });\n      } else if (this.targetNum < 2){\n        team.childNodes.forEach((child) => {\n          const index = child.getAttributeNode('value').value;\n          if (side[index].alive){\n            child.childNodes[0].classList.add('single-target');\n            child.childNodes[0].addEventListener('click', clickSingleTarget);\n          }\n        });\n      } else {\n        team.childNodes.forEach((child) => {\n          const index = child.getAttributeNode('value').value;\n            if (side[index].alive){\n              child.childNodes[0].classList.add('all-targets');\n              child.childNodes[0].addEventListener('click', clickAllTarget);\n            }\n          }\n        )\n      }\n    }\n  }\n}\n\nmodule.exports = Skill;\n\n//# sourceURL=webpack:///./src/character/skills/skill.js?");

/***/ }),

/***/ "./src/character/skills/status.js":
/*!****************************************!*\
  !*** ./src/character/skills/status.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Poisoned\": () => (/* binding */ Poisoned),\n/* harmony export */   \"ArmorBoost\": () => (/* binding */ ArmorBoost)\n/* harmony export */ });\nclass Status{\n  constructor(source, turns, stackable = false, name, description){\n    this.source = source;\n    this.name = name;\n    this.description = description;\n    this.turns = turns;\n    this.remainingTurn = turns;\n    this.stackable = stackable;\n  }\n\n  apply(target, active){\n    if (active.stackable){\n      active.remainingTurn += this.turns;\n    } else {\n      active.remainingTurn = this.turns;\n    }\n    this.once(target);\n    this.activate(target);\n  }\n}\n\nclass Burning extends Status{\n  constructor(source, turns, damage = 0, stackable = false, name = \"Burning\", description = null){\n    damage = source.damageCal(`fire`, 0.2, 5);\n    description = `Take ${damage} every turn for ${turns}. Reduce your fire resistance by 20%.`;\n    super(source, turns, stackable, name, description);\n    this.damage = damage;\n    this.resistance = -0.2;\n  }\n\n  once(target){\n    target.fireRes += this.resistance;\n  }\n\n  activate(target){\n    if (this.remainingTurn > 0){\n      target.takeDamge(`fire`, this.damage);\n      this.remainingTurn--;\n    }\n  }\n\n  remove(target){\n    target.fireRes += this.resistance;\n  }\n}\n\nclass Poisoned extends Status {\n  constructor(source, turns, damage = 0, stackable = false, name = \"Poisoned\", description = nulls){\n    damage = source.damageCal(`poison`, 0.2, 5);\n    description = `Take ${damage} every turn for ${turns}. Reduce your poison resistance by 20%.`;\n    super(source, turns, stackable, name, description);\n    this.damage = damage;\n    this.resistance = -0.2;\n  }\n\n  once(target){\n    target.poisonRes += this.resistance;\n  }\n\n  activate(target){\n    if (this.remainingTurn > 0){\n      target.takeDamge(`poison`, this.damage);\n      this.remainingTurn--;\n    }\n  }\n\n  remove(target){\n    target.poisonRes += this.resistance;\n  }\n}\n\nclass ArmorBoost extends Status {\n  constructor(source, turns, armor = 0, increaseMax, recovery, name, description, stackable = false){\n    super(source, turns, stackable, name, description);\n    this.armor = armor;\n    this.increaseMax = increaseMax;\n    this.recovery = recovery;\n  }\n\n  once(target){\n    if (this.increaseMax){\n      target.maxArmor += this.armor;\n      target.armor += this.armor;\n    }\n  }\n\n  activate(target){\n    if(this.recovery && this.remainingTurn > 0){\n      target.armor += this.armor;\n      if(target.armor > target.maxArmor){\n        target.armor = target.maxArmor;\n      }\n    }\n    this.remainingTurn--;\n  }\n\n  remove(target){\n    console.log(target.maxArmor);\n    if (this.increaseMax){\n      target.maxArmor = target.maxArmor - this.armor;\n      if(target.armor > target.maxArmor){\n        target.armor = target.maxArmor; \n      }\n    }\n    console.log(target.maxArmor);\n  }\n}\n\n//# sourceURL=webpack:///./src/character/skills/status.js?");

/***/ }),

/***/ "./src/game.js":
/*!*********************!*\
  !*** ./src/game.js ***!
  \*********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Slime = __webpack_require__(/*! ./character/enemies/slime.js */ \"./src/character/enemies/slime.js\");\nconst Rogue = __webpack_require__(/*! ./character/classes/rogue.js */ \"./src/character/classes/rogue.js\");\nconst Ranger = __webpack_require__(/*! ./character/classes/ranger */ \"./src/character/classes/ranger.js\");\nconst Cleric = __webpack_require__(/*! ./character/classes/cleric.js */ \"./src/character/classes/cleric.js\");\nconst Warrior = __webpack_require__(/*! ./character/classes/warrior.js */ \"./src/character/classes/warrior.js\");\nconst Wizard = __webpack_require__(/*! ./character/classes/wizard.js */ \"./src/character/classes/wizard.js\");\n\nfunction Game(){\n  this.start = false;\n  this.players = new Array(4);\n  this.enemies = new Array(4);\n  this.turns = [];\n  this.currentTurn = this.turns[0];\n  this.gameOver = false;\n}\n\nGame.prototype.addEnemy = function(){\n  for (let i = 0; i < this.enemies.length; i++){\n    this.enemies[i] = new Slime(i);\n  }\n};\n\nGame.prototype.addAllies = function(){\n  this.players[0] = new Warrior(0);\n  this.players[1] = new Cleric(1);\n  this.players[2] = new Wizard(2);\n  this.players[3] = new Rogue(3);\n}\n\nGame.prototype.setTurn = function(){\n  this.players.forEach((player) => {\n    this.turns.push(player);\n  });\n  this.enemies.forEach((enemy) => {\n    this.turns.push(enemy);\n  });\n\n  this.reorderTurn();\n  this.currentTurn = this.turns[0];\n};\n\nGame.prototype.reorderTurn = function(){\n  this.turns = this.turns.sort((player, enemy) => player.initiative - enemy.initiative);\n  this.turns = this.turns.reverse();\n}\n\nGame.prototype.checkTurn = function(){\n  for (let i = 0; i < this.turns.length; i++){\n    if (!this.turns[i].alive){\n      this.turns.splice(i, 1);\n      i--;\n    };\n  }\n};\n\nGame.prototype.nextTurn = function(){\n  let temp = this.turns.shift();\n  temp.endTurn();\n  this.turns.push(temp);\n  this.currentTurn = this.turns[0];\n};\n\nGame.prototype.win = function(){\n  for (let i = 0; i < this.enemies.length; i++){\n    if (this.enemies[i].alive) return false;\n  }\n  this.gameOver = true;\n  return true;\n};\n\nGame.prototype.lose = function(){\n  for (let i = 0; i < this.players.length; i++){\n    if (this.players[i].alive) return false;\n  }\n  this.gameOver = true;\n  return true;\n}\n\nmodule.exports = Game;\n\n\n//# sourceURL=webpack:///./src/game.js?");

/***/ }),

/***/ "./src/game_view.js":
/*!**************************!*\
  !*** ./src/game_view.js ***!
  \**************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Game = __webpack_require__(/*! ./game.js */ \"./src/game.js\");\n\nclass GameView{\n  constructor(game){\n    this.game = game;\n  }\n\n  setupView(){\n    const grid = document.getElementById('game-view');\n    const ap = document.getElementById('ap-display');\n    const currentAP = document.createElement('i');\n    const maxAP = document.createElement('i');\n    const info = document.getElementById('info-display');\n    const endTurn = document.createElement('button');\n    const returnToMenu = document.createElement('button');\n    endTurn.setAttribute('id', 'end-turn');\n    endTurn.innerHTML = \"End Turn\"\n    returnToMenu.setAttribute('id', 'return-to-menu');\n    returnToMenu.innerHTML = \"Return to menu\";\n    currentAP.setAttribute('id', 'current-AP');\n    maxAP.setAttribute('id', 'max-AP');    \n    const navBar = document.getElementById('nav-bar');\n    const turns = document.getElementById('turn-display');\n    const ally = document.getElementById('player-team');\n    const enemy = document.getElementById('enemy-team');\n    const currentTurn = this.game.currentTurn;\n    currentAP.innerHTML = `${currentTurn.AP}`;\n    maxAP.innerHTML = `/${currentTurn.APMax}`;\n    currentAP.style = `color:green`;\n    ap.appendChild(currentAP);\n    ap.appendChild(maxAP);\n    navBar.append(returnToMenu);\n    grid.append(endTurn);\n    this.charInfoDisplay(info);\n    this.skillInfoDisplay(info);\n    for (let i = 0; i < this.game.players.length; i++){\n      this.game.players[i].render(ally, i);\n    }\n    for (let i = 0; i < this.game.enemies.length; i++){\n      this.game.enemies[i].render(enemy, i);\n    }\n    for (let i = 0; i < this.game.turns.length; i++){\n      turns.appendChild(this.game.turns[i].renderPortrait());\n    }\n    \n    if (currentTurn.side === 'player'){\n      const currentTurnSkills = document.getElementById(`${currentTurn.charType}-${currentTurn.id}-skills`);\n      this.currentTurn(currentTurnSkills);\n    }\n\n    const aiTurn = function(){\n      endTurn.disabled = true;\n      let currentTurn = GAME.currentTurn;\n      let done = false;\n      while(!done){\n        if (currentTurn.AP < 2) done = true \n        else {\n          let skills = currentTurn.skills;\n          let skillIndex = Math.floor(Math.random() * (skills.length - 1));\n          while (currentTurn.AP > 1 && skills[skillIndex].AP > currentTurn.AP){\n            skillIndex = Math.floor(Math.random() * (skills.length - 1));\n          }\n          let skillToUse = skills[skillIndex];\n          let targets, targetIndex;\n          currentTurn.AP -= skillToUse.AP;\n\n          if (skillToUse.targetType === 'enemy'){\n            if (skillToUse.targetNum < 2){\n              targets = GAME.players;\n              targetIndex = Math.floor(Math.random() * targets.length);\n              while (!targets[targetIndex].alive){\n                targetIndex = targetIndex = Math.floor(Math.random() * targets.length);\n              }\n              skillToUse.performSkill(targets[targetIndex]);\n            } else {\n              targets.forEach(target => {\n                skillToUse.performSkill(target);\n              })\n            }\n          } else if (skillToUse.targetType === 'self') {\n            skillToUse.performSkill(currentTurn);\n          } else {\n            if (skillToUse.targetNum < 2){\n              targets = GAME.enemies;\n              targetIndex = Math.floor(Math.random() * targets.length);\n              while (!targets[targetIndex].alive){\n                targetIndex = targetIndex = Math.floor(Math.random() * targets.length);\n              }\n              skillToUse.performSkill(targets[targetIndex]);\n            } else {\n              targets.forEach(target => {\n                skillToUse.performSkill(target);\n              })\n            }\n          }       \n        }\n      }\n      GAME.nextTurn();\n      GAME_VIEW.renderFrame();\n      \n      if (!GAME.gameOver && GAME.currentTurn.side === 'enemy') setTimeout(aiTurn, 1000);\n      else if (GAME.currentTurn.side === 'player'){\n        endTurn.disabled = false;\n        const currentTurnSkills = document.getElementById(`${GAME.currentTurn.charType}-${GAME.currentTurn.id}-skills`);\n        GAME_VIEW.currentTurn(currentTurnSkills);\n      }\n    }\n\n    returnToMenu.addEventListener('click', () => {\n      const menuModal = document.getElementsByClassName(\"menu\")[0];\n      const startButton = document.getElementById(\"start\");\n      menuModal.classList.remove(\"hidden\");\n      if (this.game.start){\n        startButton.value = \"\";\n      }\n    })\n\n    endTurn.addEventListener('click', () => {      \n      let currentTurn = this.game.currentTurn;\n\n      if (currentTurn.side === 'player'){\n        const currentTurnSkills = document.getElementById(`${currentTurn.charType}-${currentTurn.id}-skills`);\n        this.endTurn(currentTurnSkills);\n      }\n      \n      this.game.nextTurn();\n\n      currentTurn = this.game.currentTurn;\n\n      currentTurn.conditions.forEach((condi) =>{\n        condi.activate(currentTurn);\n        this.renderFrame();\n      })\n\n      if (currentTurn.side === 'player'){\n        const currentTurnSkills = document.getElementById(`${currentTurn.charType}-${currentTurn.id}-skills`);\n        this.currentTurn(currentTurnSkills);\n      } else {\n        if (!GAME.gameOver && currentTurn.alive){\n          aiTurn();\n        }\n      }\n      \n      this.renderFrame();\n    });\n\n    ally.childNodes.forEach( child => {\n      const charIndex = child.getAttributeNode('value').value;\n      child.childNodes[0].addEventListener('click', () => {\n        this.game.players[charIndex].printInfo(); \n      })\n      child.childNodes[2].childNodes.forEach( li => {\n        li.addEventListener('click', () => {\n          this.game.players[charIndex].skills[li.getAttributeNode('value').value].printInfo();\n        })\n      })\n    });\n\n    enemy.childNodes.forEach( child => {\n      child.childNodes[0].addEventListener('click', () => {\n        this.game.enemies[child.getAttributeNode('value').value].printInfo(); \n      })\n    });\n  }\n\n  renderFrame(){\n    const ap = document.getElementById('ap-display');\n    const currentAP = document.getElementById(`current-AP`);\n    const maxAP = document.getElementById(`max-AP`);\n    const turns = document.getElementById('turn-display');\n    \n    let currentTurn = this.game.currentTurn;\n\n    currentAP.innerHTML = `${currentTurn.AP}`;\n    maxAP.innerHTML = `/${currentTurn.APMax}`;\n\n    if (currentTurn.AP > 0){\n      currentAP.style = `color:green`;\n    } else {\n      currentAP.style = `color:black`;\n    }\n\n    if (currentTurn.side === `enemy`){\n      ap.classList.add('hide');\n    } else {\n      ap.classList.remove('hide');\n    }\n\n    for (let i = 0; i < GAME.players.length; i++){\n      GAME.players[i].renderFrame(i);\n    }\n    for (let i = 0; i < GAME.enemies.length; i++){\n      GAME.enemies[i].renderFrame(i);\n    }\n\n    turns.innerHTML = \"\";\n\n    GAME.checkTurn();\n\n    for (let i = 0; i < this.game.turns.length; i++){\n      turns.appendChild(this.game.turns[i].renderPortrait());\n    }\n\n    if (GAME.win()){\n      alert('You won!');\n    } else if (GAME.lose()){\n      alert('You lose!');\n    }\n  }\n\n  charInfoDisplay(el){\n    const div = document.createElement('div');\n    const ul = document.createElement('ul');\n    const img = document.createElement('img');\n    const level = document.createElement('li');\n    const charType = document.createElement('h3');\n    const maxHealth = document.createElement('li');\n    const armor = document.createElement('li');\n    const barrier = document.createElement(`li`);\n    const power = document.createElement(`li`);\n    const initiative = document.createElement(`li`);\n    const critChance = document.createElement(`li`);\n    const critDamage = document.createElement(`li`);\n    const damageMod = document.createElement(`li`);\n    const healMod = document.createElement(`li`);\n    const cdMod = document.createElement(`li`);\n    const lifesteal = document.createElement(`li`);\n    const regen = document.createElement(`li`);\n    const physicalRes = document.createElement(`li`);\n    const fireRes = document.createElement(`li`);\n    const waterRes = document.createElement(`li`);\n    const lightningRes = document.createElement(`li`);\n    const poisonRes = document.createElement(`li`);\n    const energyRes = document.createElement(`li`);\n    const holyRes = document.createElement(`li`);\n    const darkRes = document.createElement(`li`);\n    const physicalMod = document.createElement(`li`);\n    const fireMod = document.createElement(`li`);\n    const waterMod = document.createElement(`li`);\n    const lightningMod = document.createElement(`li`);\n    const poisonMod = document.createElement(`li`);\n    const energyMod = document.createElement(`li`);\n    const holyMod = document.createElement(`li`);\n    const darkMod = document.createElement(`li`);\n    const talents = document.createElement(`li`);\n    const conditions = document.createElement(`li`);\n    \n    div.classList.add('info-container', 'hidden');\n    img.classList.add('info-image', 'hidden');\n    level.setAttribute('id', 'level');\n    charType.setAttribute('id', 'charType');\n    maxHealth.setAttribute('id', 'maxHealth');\n    armor.setAttribute('id', 'armor');\n    barrier.setAttribute('id', 'barrier');\n    power.setAttribute('id', 'power');\n    initiative.setAttribute('id', 'initiative');\n    critChance.setAttribute('id', 'critChance');\n    critDamage.setAttribute('id', 'critDamage');\n    damageMod.setAttribute('id', 'damageMod');\n    healMod.setAttribute('id', 'healMod');\n    cdMod.setAttribute('id', 'cdMod');\n    lifesteal.setAttribute('id', 'lifesteal');\n    regen.setAttribute('id', 'regen');\n    physicalRes.setAttribute('id', \"physicalRes\");\n    fireRes.setAttribute('id', \"fireRes\");\n    waterRes.setAttribute('id', \"waterRes\");\n    lightningRes.setAttribute('id', \"lightningRes\");\n    poisonRes.setAttribute('id', \"poisonRes\");\n    energyRes.setAttribute('id', \"energyRes\");\n    holyRes.setAttribute('id', \"holyRes\");\n    darkRes.setAttribute('id', \"darkRes\");\n    physicalMod.setAttribute('id', \"physicalMod\");\n    fireMod.setAttribute('id', \"fireMod\");\n    waterMod.setAttribute('id', \"waterMod\");\n    lightningMod.setAttribute('id', \"lightningMod\");\n    poisonMod.setAttribute('id', \"poisonMod\");\n    energyMod.setAttribute('id', \"energyMod\");\n    holyMod.setAttribute('id', \"holyMod\");\n    darkMod.setAttribute('id', \"darkMod\")\n    talents.setAttribute('id', \"talents\");\n    conditions.setAttribute('id', \"conditions\");\n    \n    div.appendChild(charType);\n    ul.appendChild(level);\n    ul.appendChild(maxHealth);\n    ul.appendChild(armor);\n    ul.appendChild(barrier);\n    ul.appendChild(power);\n    ul.appendChild(initiative);\n    ul.appendChild(critChance);\n    ul.appendChild(critDamage);\n    ul.appendChild(damageMod);\n    ul.appendChild(healMod);\n    ul.appendChild(cdMod);\n    ul.appendChild(lifesteal);\n    ul.appendChild(regen);\n    ul.appendChild(physicalRes);\n    ul.appendChild(fireRes);\n    ul.appendChild(waterRes);\n    ul.appendChild(lightningRes);\n    ul.appendChild(poisonRes);\n    ul.appendChild(energyRes);\n    ul.appendChild(holyRes);\n    ul.appendChild(darkRes);\n    ul.appendChild(physicalMod);\n    ul.appendChild(fireMod);\n    ul.appendChild(waterMod);\n    ul.appendChild(lightningMod);\n    ul.appendChild(poisonMod);\n    ul.appendChild(energyMod);\n    ul.appendChild(holyMod);\n    ul.appendChild(darkMod);\n    ul.appendChild(talents);\n    ul.appendChild(conditions);\n    div.appendChild(ul);\n    el.appendChild(img);\n    el.appendChild(div);\n  }\n\n  skillInfoDisplay(el){\n    const div = document.createElement('div');\n    const titleContainer = document.createElement('div');\n    const title = document.createElement('h4');\n    const cost = document.createElement('i');\n    const cooldown = document.createElement('i');\n    const description = document.createElement('p');\n    \n    title.setAttribute('id', 'skill-name');\n    cost.setAttribute('id', 'skill-cost');\n    cooldown.setAttribute('id', 'skill-cooldown');\n    titleContainer.setAttribute('id', 'skill-name-container');\n    description.setAttribute('id', 'skill-description');\n    div.classList.add('skill-info-container', 'hidden');\n\n    titleContainer.appendChild(title);\n    titleContainer.appendChild(cost);\n    titleContainer.appendChild(cooldown);\n    div.appendChild(titleContainer);\n    div.appendChild(description);\n    el.appendChild(div);\n  }\n\n  currentTurn(el){\n    el.childNodes.forEach((child) => {\n      const index = child.getAttributeNode('value').value;\n      const skill = this.game.currentTurn.skills[index];\n      if (this.game.currentTurn.alive && this.game.currentTurn.AP >= skill.AP && skill.remainingCD < 1){\n        child.classList.add('active');\n        child.addEventListener('click', skill.renderTarget);\n      }\n      else {\n        child.classList.remove('active');\n        child.removeEventListener('click', skill.renderTarget);\n      }\n    })\n  }\n\n  endTurn(el){\n    el.childNodes.forEach((child) => {\n      const index = child.getAttributeNode('value').value;\n      const skill = this.game.currentTurn.skills[index];\n      child.classList.remove('active');\n      child.removeEventListener('click', skill.renderTarget);\n    })\n  }\n}\n\nmodule.exports = GameView;\n\n//# sourceURL=webpack:///./src/game_view.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const Game = __webpack_require__(/*! ./game.js */ \"./src/game.js\");\nconst Sound = __webpack_require__(/*! ./sound.js */ \"./src/sound.js\");\nconst GameView = __webpack_require__(/*! ./game_view.js */ \"./src/game_view.js\");\n\nwindow.MUSIC = new Sound;\nwindow.GAME = new Game;\nwindow.GAME_VIEW = new GameView(GAME);\n\ndocument.addEventListener(\"DOMContentLoaded\", function(){\n  const menuModal = document.getElementsByClassName(\"menu\");\n  const soundButton = document.getElementById(\"music\");\n  const startButton = document.getElementById(\"start\");\n  const teamButton = document.getElementById(\"team\");\n  const tutorialButton = document.getElementById(\"tutorial\");\n  const creditButton = document.getElementById(\"credits\");\n  const closeX = document.getElementsByClassName(\"close-x\");\n  const tutorialPage = document.getElementById(\"tutorial-page\");\n  const creditPage = document.getElementById(\"credit-screen\");\n  const teamPage = document.getElementById(\"team-management\");\n  MUSIC.menuMusic.volume = 0.2;\n\n  startButton.addEventListener('click', () => {\n    menuModal[0].classList.add(\"hidden\");\n    if (!GAME.start){\n      GAME.start = true;\n      GAME.addAllies();\n      GAME.addEnemy();\n      GAME.setTurn();\n      GAME_VIEW.setupView();\n    } else {\n      menuModal[0].value = 'Resume Game';\n    }\n  });\n\n  creditButton.addEventListener('click', () => {\n    creditPage.classList.remove(\"hidden\");\n    closeX[0].addEventListener('click', () => {\n      creditPage.classList.add(\"hidden\");\n    });\n  });\n\n  teamButton.addEventListener('click', () => {\n    teamPage.classList.remove(\"hidden\");\n    closeX[1].addEventListener('click', () => {\n      teamPage.classList.add(\"hidden\");\n    });\n  });\n\n  tutorialButton.addEventListener('click', () => {\n    tutorialPage.classList.remove(\"hidden\");\n    closeX[2].addEventListener('click', () => {\n      tutorialPage.classList.add(\"hidden\");\n    });\n  });\n\n  soundButton.addEventListener(\"click\", () => {\n    MUSIC.playAudio(MUSIC.menuMusic);\n    if (MUSIC.menuMusic.paused){\n      soundButton.value = \"Unmute\";\n    } else {\n      soundButton.value = \"Mute\";\n    }\n  })\n});\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/sound.js":
/*!**********************!*\
  !*** ./src/sound.js ***!
  \**********************/
/***/ ((module) => {

eval("function Sound(){\n  this.menuMusic = new Audio(\"../dist/sounds/BBS_menu.mp3\");\n  this.menuMusic.loop = true;\n}\n\nSound.prototype.playAudio = function(audio){\n  if (audio.paused){ \n    audio.play();\n  }\n  else {\n    audio.pause();\n  } \n}\n\nmodule.exports = Sound;\n\n//# sourceURL=webpack:///./src/sound.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;